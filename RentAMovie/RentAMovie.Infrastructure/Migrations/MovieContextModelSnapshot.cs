// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentAMovie.Infrastructure.Context;

namespace RentAMovie.Infrastructure.Migrations
{
    [DbContext(typeof(MovieContext))]
    partial class MovieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("RentAMovie.Infrastructure.Model.Address", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("RentAMovie.Infrastructure.Model.Borrow", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ClientId");

                    b.Property<DateTime>("DateOfBorrow");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfReturn");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<long?>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MovieId");

                    b.ToTable("Borrow");
                });

            modelBuilder.Entity("RentAMovie.Infrastructure.Model.Client", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AddressId");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("RentAMovie.Infrastructure.Model.Movie", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Director");

                    b.Property<string>("Genre");

                    b.Property<bool>("IsRented");

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("RentAMovie.Infrastructure.Model.Borrow", b =>
                {
                    b.HasOne("RentAMovie.Infrastructure.Model.Client", "Client")
                        .WithMany("Borrows")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RentAMovie.Infrastructure.Model.Movie", "Movie")
                        .WithMany("Borrows")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RentAMovie.Infrastructure.Model.Client", b =>
                {
                    b.HasOne("RentAMovie.Infrastructure.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });
#pragma warning restore 612, 618
        }
    }
}
